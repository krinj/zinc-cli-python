import json
from typing import Dict

import boto3
from botocore.exceptions import ClientError
import os


TARGET_EMAIL_KEY = "TARGET_EMAIL"
SENDER_KEY = "SENDER"


def handler(event, context):

    payload = create_payload_from_event(event)
    email = event["email"] if "email" in event else "hello@zinccli.com"
    email = "hello@zinccli.com" if (len(email) == 0 or "@" not in email) else email

    # Replace sender@example.com with your "From" address.
    # This address must be verified with Amazon SES.
    SENDER = os.environ[SENDER_KEY]  # "Zinc Admin <hello@zinccli.com>"

    # Replace recipient@example.com with a "To" address. If your account
    # is still in the sandbox, this address must be verified.
    if TARGET_EMAIL_KEY not in os.environ:
        return {"statusCode": "500", "body": "No target email detected."}

    RECIPIENT = os.environ[TARGET_EMAIL_KEY]

    # If necessary, replace us-west-2 with the AWS Region you're using for Amazon SES.
    AWS_REGION = "us-east-1"

    # The subject line for the email.
    name = payload["name"] if "name" in payload else "Unknown"
    SUBJECT = f"{name} [Contact Form]"

    # The character encoding for the email.
    CHARSET = "UTF-8"

    html_body = create_html_from_payload(payload)
    text_body = create_text_from_payload(payload)

    # Create a new SES resource and specify a region.
    client = boto3.client('ses', region_name=AWS_REGION)

    response = {
        'statusCode': 200,
        "body": "No event body was found.",
        "event": event
    }

    # Try to send the email.
    try:
        # Provide the contents of the email.
        ses_response = client.send_email(
            Destination={'ToAddresses': [RECIPIENT]},
            Message={
                'Body': {
                    'Html': {
                        'Charset': CHARSET,
                        'Data': html_body,
                    },
                    'Text': {
                        'Charset': CHARSET,
                        'Data': text_body,
                    },
                },
                'Subject': {
                    'Charset': CHARSET,
                    'Data': SUBJECT,
                },
            },
            ReplyToAddresses=[email],
            Source=SENDER
        )

    # Display an error if something goes wrong.
    except ClientError as e:
        print(e.response['Error']['Message'])
        response["ses_response"] = e.response['Error']['Message']
    else:
        print("Email sent! Message ID:"),
        print(ses_response['MessageId'])
        response["ses_response"] = "Successful mail sent!"

    return response


def create_payload_from_event(event):

    known_keys = ["name", "email", "phone", "notes"]
    payload: Dict[str, str] = {}

    # Add all known keys.
    for k in known_keys:
        if k in event:
            payload[k] = event[k]

    # Add all fielded keys.
    if "fields" in event:
        data = event["fields"]
        for k in data:
            payload[k] = data[k]

    return payload


def create_html_from_payload(payload: Dict[str, str]):
    html_head = """
        <html><head><style>
        .box { max-width: 720px; padding: 0.7em; margin: 5px; background-color: #eee; border-left: 4px solid #bbb; }
        .cell-title { font-size: 0.9em; }
        .cell-title-grey { color: #666; }
        .info-box { background-color: #def9ff; border-left: 4px solid #3289e6; color: #3289e6; }
        </style></head><body>
        """

    html_tail = """
        </body></html>
        """

    # Create the content.
    content = []
    for k, v in payload.items():
        item = create_form_box(k.capitalize(), v)
        content.append(item)

    # Add the information section.
    info_box = create_info_box("This message was generated by your contact form from your website.")
    content.append(info_box)

    # Put it all together.
    html_body = html_head + "\n".join(content) + html_tail
    return html_body


def create_text_from_payload(payload: Dict[str, str]):
    # Create the content.
    content = []
    for k, v in payload.items():
        item = f"{k}: {v}"
        content.append(item)
    return "\n".join(content) + "\n\n" + "This message was generated by your contact form from your website."


def create_info_box(text: str):
    return f"""
    <div class="box info-box">
    <div>{text}</div>
    </div>
    """


def create_form_box(label: str, body: str):
    return f"""
    <div class="box">
      <div class="cell-title cell-title-grey">{label}</div>
      <div>{body}</div>
    </div>
    """
